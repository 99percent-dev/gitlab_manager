buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }
  ext {
    lombokVersion = '1.18.36'
    jupiterVersion = '5.11.0'
    testContainersVersion = '1.20.0'
  }
  dependencies {
    classpath "org.openapitools:openapi-generator-gradle-plugin:7.10.0"
  }
}

plugins {
  id 'idea'
  id 'java'
  id 'org.springframework.boot' version '3.4.0'
  id("org.openapi.generator") version "7.10.0"
  id 'info.solidsoft.pitest' version "1.15.0"
}
apply plugin: 'io.spring.dependency-management'

repositories {
  mavenCentral()
}

group = 'dev.ixixpercent.gitlab_manager'
version = '1.0-SNAPSHOT'

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}


openApiGenerate {
  generatorName.set("spring")
  generateApiDocumentation.set(true)
  inputSpec.set("$projectDir/src/api/gitlab_manager-v0.1.yaml")
  outputDir.set("$buildDir/generated/openapi")
  apiPackage.set("$group" + ".api")
  modelPackage.set("$group" + ".model")
  configOptions.set([
    dateLibrary              : "java8",
    useSpringBoot3           : "true",
    skipSupportingFiles      : "true",
    generateSpringApplication: "false",
    skipDefaultInterface     : "true",
    interfaceOnly            : "true"
  ])
}

java {
  sourceCompatibility = 21
  targetCompatibility = 21
}


static def gitCommit() {
  def commit = ""
  def proc = "git rev-parse --short HEAD".execute()
  proc.in.eachLine { line -> commit = line }
  proc.err.eachLine { line -> println line }
  proc.waitFor()
  commit
}

static def gitBranch() {
  def branch = ""
  def proc = "git rev-parse --abbrev-ref HEAD".execute()
  proc.in.eachLine { line -> branch = line }
  proc.err.eachLine { line -> println line }
  proc.waitFor()
  branch
}

static def buildNumber() { System.getProperty("buildNumber") ?: "local" }


project.ext.set('branch', gitBranch())
project.ext.set('commit', gitCommit())
project.ext.set('buildNumber', buildNumber())

// OpenAPI
sourceSets.main.java.srcDir "${buildDir}/generated/openapi/src/main/java"
sourceSets.test.java.srcDir "${buildDir}/generated/openapi/src/test/java"
compileJava.dependsOn tasks.named("openApiGenerate")

sourceSets {
  integrationTest {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

// mutation testing
pitest {
  pitestVersion = '1.15.0' // Ensure this matches the PIT plugin version
  verbose = false
  junit5PluginVersion = '1.2.1'
  threads = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
  outputFormats = ['XML', 'HTML']
  historyInputLocation = "${project.rootDir}/.mutation_history"
  historyOutputLocation = "${project.rootDir}/.mutation_history"
}


// integration tests
configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
  useJUnitPlatform()
  description = 'Runs integration tests.'
  group = 'verification'

  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  shouldRunAfter test
}
check.dependsOn integrationTest

// docker image
task dockerImage(dependsOn: bootJar) {
  copy {
    from "./"
    into "build/libs"
    include "Dockerfile"
  }

  doFirst {
    def dockerCommand = "docker build ./build/libs --build-arg JAR_FILE=${archivesBaseName}-${version}.jar -t ${project.name}:${version}_${project.branch}_${project.commit}_${project.buildNumber}"
    println "Executing: ${dockerCommand}"
    def proc = dockerCommand.execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()

  }
}

dependencies {

  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

  implementation(

    // spring
    'org.springframework.boot:spring-boot-starter',
    'org.springframework.boot:spring-boot-starter-web',
//    'org.mapstruct:mapstruct:1.5.5.Final',

    // gitlab
    'org.gitlab4j:gitlab4j-api:6.0.0-rc.7',
    'jakarta.ws.rs:jakarta.ws.rs-api:4.0.0',

    // openapi generation
    'org.openapitools:jackson-databind-nullable:0.2.6',
    'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0',

//    'org.springframework.boot:spring-boot-starter-data-jpa'
  )


  testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
  testImplementation platform("org.junit:junit-bom:${jupiterVersion}")
  testImplementation(
    'org.junit.jupiter:junit-jupiter',
    'org.springframework.boot:spring-boot-starter-test'
  )

  integrationTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  integrationTestImplementation(
    'org.springframework.boot:spring-boot-starter-test',
    'org.springframework.boot:spring-boot-starter-validation',
    "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}",
    "org.junit.jupiter:junit-jupiter-params:${jupiterVersion}",
    "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}",

//    'org.mockito:mockito-core:4.6.1',
//    'org.mockito:mockito-junit-jupiter:4.6.1',

    "org.testcontainers:testcontainers:${testContainersVersion}",
    "org.testcontainers:junit-jupiter:${testContainersVersion}",
  )
  integrationTestCompileOnly "org.projectlombok:lombok:${lombokVersion}"

  integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}"
}

test {
  useJUnitPlatform()
  maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
  // Fork a new JVM after every 100 tests
  forkEvery = 100
  testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
    events "started", "passed", "skipped", "failed", "standardOut", "standardError"
    showExceptions true
    showCauses true
    showStackTraces true
    reports {
      html.required = true
      html.outputLocation = file("$buildDir/reports/tests/test")
      junitXml.required = true
      junitXml.outputLocation = file("$buildDir/test-results/junit")
    }
  }
}
integrationTest {
  useJUnitPlatform()
  testLogging {
    showStandardStreams = true
    // to see the exceptions of failed tests
    exceptionFormat = 'full'
  }
}
